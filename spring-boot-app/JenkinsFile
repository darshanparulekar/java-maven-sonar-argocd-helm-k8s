pipeline {
  agent none // Set agent to none to define agents per stage
  stages {
    stage('Checkout') {
      agent {
        dockerContainer {
          image 'darshanparulekar/maven-darshan-docker-agent:v1'
          dockerHost 'unix:///var/run/docker.sock' // mount Docker socket
        }
      }
      steps {
        sh 'echo passed'
        //git branch: 'main', url: 'https://github.com/darshanparulekar/java-maven-sonar-argocd-helm-k8s.git'
      }
    }

    stage('Build and Test') {
      agent {
        dockerContainer {
          image 'darshanparulekar/maven-darshan-docker-agent:v1'
          dockerHost 'unix:///var/run/docker.sock' // mount Docker socket
        }
      }
      steps {
        sh 'ls -ltr'
        sh 'cd spring-boot-app && mvn clean package'
      }
    }

    stage('Static Code Analysis') {
      environment {
        SONAR_URL = "http://43.205.127.150:9000/"
      }
      agent {
        dockerContainer {
          image 'darshanparulekar/maven-darshan-docker-agent:v1'
          dockerHost 'unix:///var/run/docker.sock' // mount Docker socket
        }
      }
      steps {
        withCredentials([string(credentialsId: 'sonarqube', variable: 'SONAR_AUTH_TOKEN')]) {
          sh 'cd spring-boot-app && mvn sonar:sonar -Dsonar.login=$SONAR_AUTH_TOKEN -Dsonar.host.url=${SONAR_URL}'
        }
      }
    }

    stage('Build and Push Docker Image') {
      environment {
        DOCKER_IMAGE = "darshanparulekar/ultimate-cicd:${BUILD_NUMBER}"
        REGISTRY_CREDENTIALS = credentials('docker-cred')
      }
      agent {
        dockerContainer {
          image 'darshanparulekar/maven-darshan-docker-agent:v1'
          dockerHost 'unix:///var/run/docker.sock' // mount Docker socket
        }
      }
      steps {
        script {
            sh 'cd spring-boot-app && docker build -t ${DOCKER_IMAGE} .'
            def dockerImage = docker.image("${DOCKER_IMAGE}")
            docker.withRegistry('https://index.docker.io/v1/', "docker-cred") {
                dockerImage.push()
            }
        }
      }
    }

    stage('Update Deployment File') {
      environment {
        GIT_REPO_NAME = "java-maven-sonar-argocd-helm-k8s"
        GIT_USER_NAME = "darshanparulekar"
      }
      steps {
        withCredentials([string(credentialsId: 'github', variable: 'GITHUB_TOKEN')]) {
          sh '''
              git config user.email "parulekardarshan29@gmail.com"
              git config user.name "Darshan Parulekar"
              BUILD_NUMBER=${BUILD_NUMBER}
              sed -i "s/replaceImageTag/${BUILD_NUMBER}/g" spring-boot-app-manifests/deployment.yml
              git add spring-boot-app-manifests/deployment.yml
              git commit -m "Update deployment image to version ${BUILD_NUMBER}"
              git push https://${GITHUB_TOKEN}@github.com/${GIT_USER_NAME}/${GIT_REPO_NAME} HEAD:main
          '''
        }
      }
    }
  }
}
